name: CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '10.4.1'

jobs:
  # Job 1: Lint and Type Check
  lint-and-typecheck:
    name: Lint & Type Check
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: ${{ env.PNPM_VERSION }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Run TypeScript type check
        run: |
          pnpm --filter server build
          echo "✅ Server type check passed"

  # Job 2: Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Server Docker Image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./apps/server/Dockerfile
          push: false
          tags: jadapi-server:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          outputs: type=docker,dest=/tmp/server-image.tar

      - name: Upload Server Image Artifact
        uses: actions/upload-artifact@v4
        with:
          name: server-image
          path: /tmp/server-image.tar
          retention-days: 1

  # Job 3: Test Docker Container
  test-docker:
    name: Test Docker Container
    runs-on: ubuntu-latest
    needs: [build-docker]

    services:
      mongodb:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Server Image
        uses: actions/download-artifact@v4
        with:
          name: server-image
          path: /tmp

      - name: Load Server Docker Image
        run: docker load --input /tmp/server-image.tar

      - name: Run Server Container
        run: |
          docker run -d \
            --name jadapi-server \
            --network host \
            -e NODE_ENV=test \
            -e PORT=4001 \
            -e MONGO_URI=mongodb://localhost:27017/jadapi-test \
            -e MONGODB_URI=mongodb://localhost:27017/jadapi-test \
            -e REDIS_URL=redis://localhost:6379 \
            -e JWT_SECRET=test-secret-key-for-ci-cd-pipeline \
            -e STRIPE_SECRET_KEY=sk_test_mock \
            -e STRIPE_WEBHOOK_SECRET=whsec_mock \
            -e GOOGLE_MAPS_API_KEY=test-key \
            -e SMTP_HOST=smtp.gmail.com \
            -e SMTP_PORT=587 \
            -e SMTP_SECURE=false \
            -e SMTP_USER=test@example.com \
            -e SMTP_PASS=test-pass \
            -e SMTP_FROM_EMAIL=test@example.com \
            -e SMTP_FROM_NAME=Test \
            jadapi-server:${{ github.sha }}

      - name: Verify Environment Variables
        run: |
          echo "Checking environment variables in container..."
          docker exec jadapi-server sh -c 'echo "MONGO_URI=$MONGO_URI"'
          docker exec jadapi-server sh -c 'echo "PORT=$PORT"'

      - name: Wait for Server to Start
        run: |
          echo "Waiting for server to be healthy..."
          for i in {1..30}; do
            if curl -s http://localhost:4001/health > /dev/null 2>&1; then
              echo "✅ Server is healthy!"
              exit 0
            fi
            echo "Attempt $i/30: Server not ready yet..."
            sleep 2
          done
          echo "❌ Server failed to become healthy"
          echo "Container logs:"
          docker logs jadapi-server
          exit 1

      - name: Test Health Endpoint
        run: |
          response=$(curl -s http://localhost:4001/health)
          echo "Health check response: $response"
          if echo "$response" | grep -q "ok"; then
            echo "✅ Health check passed"
          else
            echo "❌ Health check failed"
            exit 1
          fi

      - name: Test API Endpoints
        run: |
          # Test status endpoint
          echo "Testing /api/status endpoint..."
          status_code=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:4001/api/status)
          if [ "$status_code" = "200" ]; then
            echo "✅ Status endpoint working"
          else
            echo "⚠️  Status endpoint returned $status_code"
          fi

      - name: Show Container Logs on Failure
        if: failure()
        run: docker logs jadapi-server

      - name: Cleanup
        if: always()
        run: |
          docker stop jadapi-server || true
          docker rm jadapi-server || true

  # Job 4: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [build-docker]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Server Image
        uses: actions/download-artifact@v4
        with:
          name: server-image
          path: /tmp

      - name: Load Server Docker Image
        run: docker load --input /tmp/server-image.tar

      - name: Run Trivy Security Scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: jadapi-server:${{ github.sha }}
          format: 'table'
          exit-code: '0'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'

  # Job 5: Summary
  ci-summary:
    name: CI Summary
    runs-on: ubuntu-latest
    needs: [lint-and-typecheck, build-docker, test-docker, security-scan]
    if: always()

    steps:
      - name: Check CI Status
        run: |
          echo "## 🎯 CI/CD Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Type Check | ${{ needs.lint-and-typecheck.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build Docker | ${{ needs.build-docker.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Test Docker | ${{ needs.test-docker.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.lint-and-typecheck.result }}" = "success" ] && \
             [ "${{ needs.build-docker.result }}" = "success" ] && \
             [ "${{ needs.test-docker.result }}" = "success" ] && \
             [ "${{ needs.security-scan.result }}" = "success" ]; then
            echo "✅ **All checks passed!** Ready for deployment." >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "❌ **Some checks failed.** Please review the logs." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
